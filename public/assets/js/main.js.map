{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["'use strict';\n\nlet listCharactersApi = [];\nlet listCharacterFavorite = [];\nconst ulElement = document.querySelector('.js_ul_list');\nconst url = 'https://api.disneyapi.dev/character?pageSize=50';\nconst ulFavorites = document.querySelector('.js_ul_favlist');\nconst searchBox = document.querySelector(\".js-search-box\");\nconst searchBtn = document.querySelector(\".js-search-button\");\n\n\nfetch(url)\n  .then(response => response.json())\n  .then(data => {\n    listCharactersApi = data.data;\n    renderCharacterList(listCharactersApi);\n  })\n  .catch(error => {\n    console.error('Error', error);\n});\n\n\nfunction renderCharacterList(listData) {\n  ulElement.innerHTML = '';\n  for (const character of listData) {\n    ulElement.innerHTML += renderCharacter(character);\n  }\n  addEventCharacter();\n}\n\nfunction addEventCharacter() {\n  const divElementList = document.querySelectorAll('.js_character-list');\n  for (const div of divElementList) {\n    div.addEventListener('click', handleClick); \n  }\n}\n\nfunction renderCharacter(character) { \n  const isFavorite = listCharacterFavorite.some((item) => item._id === character._id);\n  const favoriteClass = isFavorite ? 'favorite' : '';\n  const html = `\n    <div class=\"characters js_character-list ${favoriteClass}\" id=\"${character._id}\">\n      <p>Name: ${character.name}</p>\n      <img src=\"${character.imageUrl}\" alt=\"${character.name}\" />\n    </div>\n  `;\n  return html;\n}\n\nfunction renderFavoriteCharacter(character) { \n   if (!character) {\n    return ''; \n  }\n  const html = `\n    <div class=\"characters-container\">\n      <div class=\"characters js_favorite-character\" id=\"${character.id}\">\n        <p class=\"names\"> Name: ${character.name}</p>\n        <img src=\"${character.imageUrl}\" alt=\"${character.name}\" />\n      </div>\n    </div>\n  `;\n  return html;\n}\n\nfunction handleClick(event) {\n  const id = event.currentTarget.id;\n  const selectedCharacter = listCharactersApi.find((item) => item._id === parseInt(id));\n  const indexCharacter = listCharacterFavorite.findIndex((item) => item._id === parseInt(id));\n  \n  if (indexCharacter === -1) {\n    listCharacterFavorite.push(selectedCharacter);\n    event.currentTarget.classList.add('favorite');\n    moveCharacterToFavorites(event.currentTarget); // Mover el personaje al contenedor de favoritos\n  } else {\n    listCharacterFavorite.splice(indexCharacter, 1);\n    event.currentTarget.classList.remove('favorite');\n    removeCharacterFromFavorites(id); // Eliminar el personaje del contenedor de favoritos\n  }\n\n  renderFavoriteCharacter();\n}\n\nfunction moveCharacterToFavorites(characterElement) {\n  const selectedFavList = document.querySelector('.js_selected-favlist');\n  const selectedCharacterCopy = characterElement.cloneNode(true);\n  const characterId = characterElement.id;\n\n  characterElement.classList.add('favorite-original'); // Agregar una clase adicional al personaje en la primera sección\n  characterElement.dataset.originalId = characterId; // Guardar una referencia al personaje original en un atributo personalizado\n\n  selectedFavList.appendChild(selectedCharacterCopy);\n\n  // Mostrar la sección de favoritos\n  const favoritesSection = document.querySelector('.js_favorites-section');\n  favoritesSection.classList.remove('hidden-section');\n}\n\nfunction removeCharacterFromFavorites(id) {\n    // Si la sección de favoritos está vacía: ocultarla \n  const favoriteCharacters = favoritesSection.querySelectorAll('.js_favorite-character');\n  if (favoriteCharacters.length === 0) {\n    favoritesSection.classList.add('hidden-section');\n  }\n}\n\n//Add to LocalStorage\nfunction addRemoveIdIntoLocalStorage(id) {\n  const ids = JSON.parse(localStorage.getItem('characterIds')) || [];\n\n  if (ids.includes(id)) {\n    // Si el ID está incluido, se elimina\n    const newIds = ids.filter((item) => item !== id);\n    localStorage.setItem('characterIds', JSON.stringify(newIds));\n  } else {\n    // Si el ID no está incluido, se agrega\n    ids.push(id);\n    localStorage.setItem('characterIds', JSON.stringify(ids));\n  }\n}\n\n\n//filter for searching a character\nfunction handleClickbtn(event) {\n  event.preventDefault();\n  const searchValue = searchBox.value.toLowerCase();\n  const characterFilter = listCharactersApi.filter((character) =>\n    character.name.toLowerCase().includes(searchValue)\n  );\n  renderCharacterList(characterFilter);\n}\n\n//Events\nsearchBtn.addEventListener(\"click\", handleClickbtn); "]}