{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["'use strict';\n\nlet listCharactersApi = [];\nlet listCharacterFavorite = [];\nconst ulElement = document.querySelector('.js_ul_list');\nconst url = 'https://api.disneyapi.dev/character?pageSize=50';\nconst ulFavorites = document.querySelector('.js_ul_favlist');\nconst searchBox = document.querySelector(\".js-search-box\");\nconst searchBtn = document.querySelector(\".js-search-button\");\n\n//Solicitud al servidor \nfetch(url)\n  .then(response => response.json()) //coge respuesta en formato JSON\n  .then(data => {  //para manejar la respuesta anterior\n    listCharactersApi = data.data;  //respuesta del servidor+propiedad \"data\"\n    renderCharacterList(listCharactersApi); //se mostrará la lista de characters\n  })\n  .catch(error => {\n    console.error('Error', error);\n});\n\n//Renderizar characters\nfunction renderCharacterList(listData) {\n  ulElement.innerHTML = ''; // Limpiar antes de renderizar\n\n  for (const character of listData) { //bucle-iterar\n    ulElement.innerHTML += renderCharacter(character); //De agrega el HTML generado para el personaje al contenido HTML existente en ulElement.\n  }\n\n  addEventCharacter(); // Agrega el evento de click\n}\n\n//Agregar eventos click a characters y fav characters:\nfunction addEventCharacter() {\n  const divElementList = document.querySelectorAll('.js_character-list'); //Personajes en la sección characters\n  for (const div of divElementList) {    //Itera en cada div(elemento) de la lista\n    div.addEventListener('click', handleClick);  //click a div, llamada a handleclick\n  }\n\n  const favoriteCharacterList = document.querySelectorAll('.js_favorite-character'); // los personajes en la sección favorites\n  for (const character of favoriteCharacterList) {\n   // character.addEventListener('click', removeFavoriteCharacter);\n  }\n}\n\n//Eliminar personaje sección favoritos\nfunction removeFavoriteCharacter(event) {\n  const id = event.currentTarget.id; //guarda el ID cuando se hace click al character\n  const indexCharacter = listCharacterFavorite.findIndex((item) => item._id === parseInt(id)); //busca la posición del ch que tiene el mismo ID que el ch seleccionado.\nconsole.log('hola');\nconsole.log(id);\nconsole.log(indexCharacter);\n  if (indexCharacter !== -1) { //si no da -1 (se ha encontrado el ch)\n    listCharacterFavorite.splice(indexCharacter, 1); //elimina el ch de la listCh segun lo que encuentres antes.\n    event.currentTarget.remove(); //elimina el personaje de la sección de fav.\n    checkIfFavoriteIsEmpty(id); //llama a la funcion y le pasa el ID del eliminado de la sección de favs.\nconsole.log('adeu');\n    const originalCharacter = document.getElementById(id);\n    if (originalCharacter) {    //si se encuentra elemento original se quita el resaltado de estilos\n      originalCharacter.classList.remove('favorite');\n    }\n  }\n}\n\n//Pintar al HTML el character\nfunction renderCharacter(character) { \n  const isFavorite = listCharacterFavorite.some((item) => item._id === character._id); //id del item (el que envio al iterar) = id del character, se cumple la condicion (true)\n  const favoriteClass = isFavorite ? 'favorite' : '';  //condición ? expresion1(true)class'favorite' : expresion2(false)\n  const html = `\n    <div class=\"characters js_character-list ${favoriteClass}\" id=\"${character._id}\">\n      <p>Name: ${character.name}</p>\n      <img src=\"${character.imageUrl}\" alt=\"${character.name}\" />\n    </div>\n  `;\n  return html;\n}\n\n//Pintar al HTML el fav character\nfunction renderFavoriteCharacter(character) {    \n   if (!character) {                   \n    return ''; \n  }\n  const html = `\n    <div class=\"characters-container\">\n      <div class=\"characters js_favorite-character\" id=\"${character.id}\">\n        <p class=\"names\"> Name: ${character.name}</p>\n        <img src=\"${character.imageUrl}\" alt=\"${character.name}\" />\n      </div>\n    </div>\n  `;\n  return html;\n}\n\n//Funcion del evento cuando se hace click en un character\nfunction handleClick(event) {\n  const id = event.currentTarget.id;  //se obtiene el valor del atributo 'id' y se guarda en la const\n  const selectedCharacter = listCharactersApi.find((item) => item._id === parseInt(id));  \n  const indexCharacter = listCharacterFavorite.findIndex((item) => item._id === parseInt(id)); //cuando un elemento no se encuentra en el array devuelve -1\n  \n  if (indexCharacter === -1) { //si da -1 : no está en favoritos\n    listCharacterFavorite.push(selectedCharacter);  //agrega el personaje seleccionado a la lista de favs\n    event.currentTarget.classList.add('favorite');  //agrega la clase \"favorite\" al elemento HTML en q se hizo click\n    moveCharacterToFavorites(event.currentTarget); // Mover el personaje al contenedor de favoritos\n  } else {\n    console.log(listCharacterFavorite);\n    listCharacterFavorite.splice(indexCharacter, 1); //se elimina el personaje de la lista fav\n    console.log(listCharacterFavorite);\n    event.currentTarget.classList.remove('favorite');  //se elimina la clase \"favorite\"\n    checkIfFavoriteIsEmpty(id); // Eliminar el personaje del contenedor de favoritos\n  }\n\n  renderFavoriteCharacter();\n}\n\n//Mover character a sección fav\nfunction moveCharacterToFavorites(characterElement) {\n  const selectedFavList = document.querySelector('.js_selected-favlist');\n  const selectedCharacterCopy = characterElement.cloneNode(true);\n  const characterId = characterElement.id;\n\n  characterElement.classList.add('favorite-original'); // Agregar una clase adicional al personaje en la primera sección\n  characterElement.dataset.originalId = characterId; // Guardar una referencia al personaje original en un atributo personalizado\n\n  selectedFavList.appendChild(selectedCharacterCopy);\n  selectedCharacterCopy.addEventListener('click', removeFavoriteCharacter);\n\n  // Mostrar la sección de favoritos\n  let favoritesSection = document.querySelector('.js_favorites-section');\n  favoritesSection.classList.remove('hidden-section');\n}\n\n// Si la sección de favoritos está vacía: ocultarla \nfunction checkIfFavoriteIsEmpty() { \n  let favoritesSection = document.querySelector('.js_favorites-section');\n  const favoriteCharacters = favoritesSection.querySelectorAll('.js_selected-favlist');\nconsole.log(favoriteCharacters);\n  if (favoriteCharacters.length === 0) {\n    favoritesSection.classList.add('hidden-section');\n  }\n}\n\n//Add to LocalStorage\nfunction addRemoveIdIntoLocalStorage(id) {\n  const ids = JSON.parse(localStorage.getItem('characterIds')) || [];  //get:recupera el valor almacenado como string y el json.parse lo convierte en un array. Si el valor no es valido se da una const vacía. \n\n  if (ids.includes(id)) { // Si el ID está incluido en el LS: \n    const newIds = ids.filter((item) => item !== id);  //\n    localStorage.setItem('characterIds', JSON.stringify(newIds));  //guarda la nueva const newIds en el LS convertido en una cadena de texto mediante json.stringify\n\n  } else {  // Si el ID no está incluido:\n    ids.push(id);  //se agrega al LS\n    localStorage.setItem('characterIds', JSON.stringify(ids)); //se guarda en el LS convertido en una cadena de texto mediante json.stringify\n  }\n}\n\n//Filter to search\nfunction handleClickbtn(event) {\n  event.preventDefault();\n  const searchValue = searchBox.value.toLowerCase(); //para obtener el valor del texto\n  const characterFilter = listCharactersApi.filter((character) =>\n    character.name.toLowerCase().includes(searchValue)\n  );\n  renderCharacterList(characterFilter);\n}\n\n//Events\nsearchBtn.addEventListener(\"click\", handleClickbtn); \n\n\n\n"]}